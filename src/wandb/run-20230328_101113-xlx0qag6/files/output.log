***** Running Evaluation *****
  Num examples = 23542
  Batch size = 8
Training completed. Do not forget to share your model on huggingface.co/models =)
Model config DebertaV2Config {
  "_name_or_path": "microsoft/deberta-v3-small",
  "attention_probs_dropout_prob": 0.1,
  "classifiers_size": [
    2
  ],
  "hidden_act": "gelu",
  "hidden_dropout_prob": 0.1,
  "hidden_size": 768,
  "id2label": {
    "0": 0,
    "1": 1
  },
  "initializer_range": 0.02,
  "intermediate_size": 3072,
  "label2id": {
    "0": 0,
    "1": 1
  },
  "layer_norm_eps": 1e-07,
  "max_position_embeddings": 512,
  "max_relative_positions": -1,
  "model_type": "deberta-v2",
  "norm_rel_ebd": "layer_norm",
  "num_attention_heads": 12,
  "num_hidden_layers": 6,
  "pad_token_id": 0,
  "pooler_dropout": 0,
  "pooler_hidden_act": "gelu",
  "pooler_hidden_size": 768,
  "pos_att_type": [
    "p2c",
    "c2p"
  ],
  "position_biased_input": false,
  "position_buckets": 256,
  "relative_attention": true,
  "share_att_key": true,
  "tasks": [
    ""
  ],
  "transformers_version": "4.26.1",
  "type_vocab_size": 0,
  "vocab_size": 128100
}
Disabling tokenizer parallelism, we're using DataLoader multithreading already
> /mnt/nfs_share_magnet2/dsileo/libs/modlog/src/pandas/_libs/lib.pyx(2924)pandas._libs.lib.map_infer()
*** NameError: name 'k' is not defined
> /mnt/nfs_share_magnet2/dsileo/miniconda3/lib/python3.10/site-packages/pandas/core/base.py(890)_map_values()
    888
    889         # mapper is a function
--> 890         new_values = map_f(values, mapper)
    891
    892         return new_values
*** NameError: name 'k' is not defined
> /mnt/nfs_share_magnet2/dsileo/miniconda3/lib/python3.10/site-packages/pandas/core/series.py(4539)map()
   4537         dtype: object
   4538         """
-> 4539         new_values = self._map_values(arg, na_action=na_action)
   4540         return self._constructor(new_values, index=self.index).__finalize__(
   4541             self, method="map"
*** NameError: name 'k' is not defined
> /tmp/ipykernel_3702421/3739314222.py(3)pop()
      1 def pop(df):
      2     for k in df:
----> 3         if len(df[k].map(set).map(len).value_counts())==1:
      4             df[k]=df[k].map(lambda x:x[0])
      5     return df
'names'
--KeyboardInterrupt--
